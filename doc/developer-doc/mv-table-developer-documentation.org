#+title: Developer documentation

* Data storage

  By default column tables are stored in table class slots - one slot
  per vector.  Extensions are allowed to store tables as
  - sequence of vectors
    - a vector of vectors
    - a structure of vectors
  - a single vector
  - a matrix
  - a collection of tables of same type
    
    
  Each of these has impact on table growth and type checking

  The table storage options, by table type are[fn:1]
  |              | N      | VxV    | SxV    | V      | M      |
  |--------------+--------+--------+--------+--------+--------|
  | Column table | \check | \check | \check | \check |        |
  |--------------+--------+--------+--------+--------+--------|
  | Square table | \check | \check | \check | \check | \check |
  | Matrix table |        | \check |        | \check | \check |


  
  A table can add rows on the storage options (\star is for square tables
  where all columns have equal length):
  |     | + Row       | + Col  |
  |-----+-------------+--------|
  | N   | \check      |        |
  | VxV | \check\star | \check |
  | SxV | \check\star | \check |
  | V   |             |        |
  | M   |             |        |

  Columns are added by redefining a table, much as a class can be
  redefined by recompiling =defclass=.  All table storage types can
  add columns.

  Column type checking depends on the table type.  Matrix table store
  the same data type in all the cells.
  | Type   | Checking? |
  |--------+-----------|
  | Column | \check    |
  | Square | \check    |
  | Matrix | \times    |

  Efficient type works only for V\times{}V and S\times{}V storage types.
  Internally, the vectors are defined to store values of a specified
  type, which can lead to storage and access optimization by the CL.
  
* CLOS & MOP implementation of tables as classes

  mv-tables are defined in terms of several metaobject (MO) classes
  and at least one standard class mixin.

  Table organization, storage and operations are specified using three
  families of MO classes:
  - type virtual MO class and its specialized MO classes
    - column
      - square.  This type is a sub-type of the column table type
    - matrix
  - storage virtual MO class and its specialized MO classes
    - columns
    - matrix
    - vector
    - file
    - external
      - various db-access MO classes
  - access virtual MO class and its specialized MO classes
    - sequential
    - random


  Not all MO class combinations are defined in the code.  Instead,
  they are programatically generated, as discussed in discussed in
  [MOP, Sect 2.4].
  
  When a mv-table is instantiated, it's metaclass is from one of the
  three organization metaclasses families.  The exact one is specified
  by the storage and access mix-in metaclasses.


  Table meta-data (author, source, min, max row counts, allowed
  operations, etc), are implemented via the table meta-data
  (=table-md=) standard class or or classes specialized on it.  This
  class is a mix-in to the mv-table class.

  When the table is instantiated in column mode it has slots storing
  columns and more slots storing the table meta-data.  The column
  slots are identified as the class direct slots, while the meta-data
  slots are identified as inherited slots.

* CLOS & MOP implementation methods on tables

  All methods are defined as generic functions on the virtual MO
  classes.  Individual specializations define the methods, when they
  are applicable.

  Thus, for example, (setf (row-index row) new-index) method will have
  a =:before= method for sequential file-based table that will check
  that new-index \geq current-index, or else issue an error.

* CLOS & MOP of square tables

  The general user inteface is similar to =defclass= and
  =make-instance=.  The table is defined with several predefined slots
  slots and several properties.
  #+BEGIN_SRC lisp
    (deftable some-table-definition (&rest super-tables)
      ((row-labels-schema :title title
                          :names (list of names)
                          :equality-predicate equality-predicate
                          :comparator names-comparator
                          :value-normalizer value-normalizer
                          :accessor row-labels-schema-accessor)
       (col-labels-schema  :title title
                           :names (list of names)
                           :equality-predicate equality-predicate
                           :comparator names-comparator
                           :value-normalizer value-normalizer
                           :accessor col-labels-schema-accessor))
       (:documentation "Documentation")
       (:value-type value-type)
       (:value-normalizer value-normalizer)
       (:equality-predicate equality-predicate)
       (:comparator comparator)
       (:default-value default-value)
       (:adjustable-p adjustable-p)))
  #+END_SRC
  It is instantiated with
  #+BEGIN_SRC lisp
    (make-table 'some-table-definition &key storage device direction protocol
                :data-source "some text"
                :documentation "more text")
  #+END_SRC
  The table definition can have other slots, which behave entirely as
  the usual class slots.

  A table definition can include inheritance from other tables.  The
  rules for inheritance are as follows:
  
  The rules for table inheritance are as follows:
  - Schema:
    - Names in the schema is the union of names in all tables.
    - Ordering of the names, and removal of duplicates is accomplished
      using the comparator and equality-predicate properties
      - If these are undefined, then sorting or removal of duplicates
        is not performed
    - Only names are inherited.  All other properties are as assigned
      (or not)
  - Other table properties are not inherited, but used as assigned (or
    not assigned)
  - Inheritance of other table slots follow the usual CLOS
    specification
      
    
  Following the example above, under the hood we have the following:
  - A class =some-table-definition= that has defined row and column
    labels schema and various table and schema properties
    - The class does not specify the data format, storage, direction,
      protocol.  These have sensible defaults, which can be overridden
      during instantiation.
  - Instantiation of =some-table-definition= creates an object.  This
    object has accessors for table values, rows, columns and other
    properties.  These accessors are the public interface to tables. 
    - All intances of =some-table-definition= share the same
      properties.  Thus, the slots have allocation =:class=
  - The =some-table-definition-class= is an instance of the
    =square-table-class= metaclass.  The meta-class enables the slot
    inheritance machinery described above.


  This is how we go about it
  - we define a meta-class square-table-mc
  - we define =deftable= macro, similar to =defclass=
  - we setup the slot processing method so that the slots processed
    above are processed in a special manner
    - Other slots are processed in the ordinary way
  - We then define the slot inheritance

* Footnotes

[fn:1] What is the N type?

